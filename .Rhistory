sum()
}
Q <- f_Q(alpha = ALPHA + DELTA,
beta = BETA,
df = f.sim)
Q.tilde <- f_Q(alpha = ALPHA,
beta = BETA - DELTA,
df = m.sim)
R <- mu.hat_w + DELTA
R.tilde <- mu.hat_m - DELTA
#### N and N.tilde ####
f_N <- function(alpha, beta, R, sigma.hat.sq_m, Q,
Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - R)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == beta) %>% pull("v"))
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("v"))
a3 <- -2*mu.hat_w + 2*R*Q
return(a1-a2+a3)
}
N <- f_N(ALPHA, BETA, R, sigma.hat.sq_m, Q,
Q.tilde, f.sim,mu.hat_m, mu.hat_w, DELTA)
f_N.tilde <- function(alpha, beta, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - mu.hat_w)^2 - sigma.hat.sq_w/Q) *(df %>% filter(age == beta - delta) %>% pull("v"))
a2 <- ((alpha - R.tilde)^2 - sigma.hat.sq_w/Q)* (df %>% filter(age == alpha) %>% pull("v"))
a3 <- -2*mu.hat_m + 2*R.tilde*Q.tilde
return(a1 - a2 + a3)
}
N.tilde <- f_N.tilde(ALPHA, BETA, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, m.sim, mu.hat_m, mu.hat_w, DELTA)
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("v"))
a3 <- -2*mu.hat_w + 2*R*Q
return(a1-a2+a3)
#### N and N.tilde ####
f_N <- function(alpha, beta, R, sigma.hat.sq_m, Q,
Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - R)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == beta) %>% pull("v"))
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("v"))
a3 <- -2*mu.hat_w + 2*R*Q
return(a1-a2+a3)
}
N <- f_N(ALPHA, BETA, R, sigma.hat.sq_m, Q,
Q.tilde, f.sim,mu.hat_m, mu.hat_w, DELTA)
f_N.tilde <- function(alpha, beta, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - mu.hat_w)^2 - sigma.hat.sq_w/Q) *(df %>% filter(age == beta - delta) %>% pull("v"))
a2 <- ((alpha - R.tilde)^2 - sigma.hat.sq_w/Q)* (df %>% filter(age == alpha) %>% pull("v"))
a3 <- -2*mu.hat_m + 2*R.tilde*Q.tilde
return(a1 - a2 + a3)
}
#### N and N.tilde ####
f_N <- function(alpha, beta, R, sigma.hat.sq_m, Q,
Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - R)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == beta) %>% pull("v"))
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("v"))
a3 <- -2*mu.hat_w + 2*R*Q
return(a1-a2+a3)
}
N <- f_N(ALPHA, BETA, R, sigma.hat.sq_m, Q,
Q.tilde, f.sim,mu.hat_m, mu.hat_w, DELTA)
f_N.tilde <- function(alpha, beta, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - mu.hat_w)^2 - sigma.hat.sq_w/Q) *(df %>% filter(age == beta - delta) %>% pull("v"))
a2 <- ((alpha - R.tilde)^2 - sigma.hat.sq_w/Q)* (df %>% filter(age == alpha) %>% pull("v"))
a3 <- -2*mu.hat_m + 2*R.tilde*Q.tilde
return(a1 - a2 + a3)
}
N.tilde <- f_N.tilde(ALPHA, BETA, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, m.sim, mu.hat_m, mu.hat_w, DELTA)
#### D and D.tilde ####
# Need to calc v' (vp; v prime)
f.sim$vp <- 0
m.sim$vp <- 0
for (i in 1:nrow(f.sim)){
vp <- (f.sim[i+1, "v"] - f.sim[i, "v"] ) %>% pull()
n <- (f.sim[i, "n"]) %>% pull
f.sim[i, "vp"] <- vp/n
}
f.sim[nrow(f.sim), "vp"] <- 0
for (i in 1:nrow(m.sim)){
vp <- (m.sim[i+1, "v"] - m.sim[i, "v"] ) %>% pull()
n <- (m.sim[i, "n"]) %>% pull
m.sim[i, "vp"] <- vp/n
}
m.sim[nrow(m.sim), "vp"] <- 0
f_D <- function(beta, R, sigma.hat.sq_m, Q.tilde,
df, alpha, mu.hat_m, delta, Q){
a1 <- ((beta - R)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == beta) %>% pull("vp"))
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("vp"))
a3 <- 2*(beta - R)*(df %>% filter(age == beta) %>% pull("v"))
a4 <- 2*(alpha - mu.hat_m)*(df %>% filter(age == alpha + delta) %>% pull("v")) + 2*Q
return(a1 - a2 - a3 + a4)
}
D <- f_D(BETA, R, sigma.hat.sq_m, Q.tilde, m.sim, ALPHA, mu.hat_m, DELTA, Q)
f_D.tilde <- function(beta, mu.hat_w, sigma.hat.sq_w, Q, df, alpha, R.tilde, Q.tilde, delta) {
a1 <- ((beta - mu.hat_w)^2 - sigma.hat.sq_w/Q) * (df %>% filter(age == beta - delta) %>% pull("vp"))
a2 <- ((alpha - R.tilde)^2 - sigma.hat.sq_w/Q) * (df %>% filter(age == alpha) %>% pull("vp"))
a3 <- 2 * (beta - mu.hat_w) * (df %>% filter(age == beta - delta) %>% pull("v"))
a4 <- 2*(alpha - R.tilde) * (df %>% filter(age == alpha) %>% pull("v")) + 2*Q.tilde
return(a1 - a2 - a3 + a4)
}
D.tilde <- f_D.tilde(BETA, mu.hat_w, sigma.hat.sq_w, Q, m.sim, ALPHA, R.tilde, Q.tilde, DELTA)
#### The Formulae  ####
#### Estimator 1 ####
f_e1 <- function(delta = DELTA, N = N, D = D, sigma.hat.sq_w = sigma.hat.sq_w,
sigma.hat.sq_m = sigma.hat.sq_m, mu.hat_w = mu.hat_w, Q = Q,
Q.tilde = Q.tilde, R = R) {
a1 <- delta - N/D
print(a1)
a2 <- N^2 - 2*D*(sigma.hat.sq_w + 2*mu.hat_w^2 - Q*mu.hat_w^2 - 2*R*mu.hat_w + Q*R^2 -  Q/Q.tilde*sigma.hat.sq_m)
print(a2)
return(a1 - (sqrt(a2)/D))
}
e1 <- f_e1(delta = DELTA, N = N, D = D, sigma.hat.sq_w = sigma.hat.sq_w,
sigma.hat.sq_m = sigma.hat.sq_m, mu.hat_w = mu.hat_w, Q = Q,
Q.tilde = Q.tilde, R = R)
f_mu.hat <- function(alpha, beta, delta, df) {
df %>%
filter(age > alpha & age < beta) %>%
mutate(av = age * v * n ) %>%
select(av) %>%
sum() %>%
divide_by(df %>% select(n) %>% sum()) %>%
return()
}
mu.hat_w <- f_mu.hat(alpha = ALPHA+DELTA, beta = BETA, delta = DELTA, df = f.sim)
mu.hat_m <- f_mu.hat(alpha = ALPHA, beta = BETA-DELTA, delta = DELTA, df = m.sim)
#### sigma.hat.sq ####
f_sigma.hat.sq <- function(alpha, beta, delta, df, mu.hat) {
df %>%
filter(age > alpha, age < beta) %>%
#mutate(a.mu = age - mu.hat) %>% # CHECK THIS
mutate(a.mu = age) %>%
mutate(r = a.mu^2 * v * n) %>%
select(r) %>%
sum() %>%
return()
}
sigma.hat.sq_w <- f_sigma.hat.sq(alpha = ALPHA + DELTA,
beta = BETA,
delta = DELTA,
df = f.sim,
mu.hat = mu.hat_w)
sigma.hat.sq_m <- f_sigma.hat.sq(alpha = ALPHA,
beta = BETA - DELTA,
delta = DELTA,
df = m.sim,
mu.hat = mu.hat_m)
mu.hat_w <- f_mu.hat(alpha = ALPHA+DELTA, beta = BETA, delta = DELTA, df = f.sim)
mu.hat_m <- f_mu.hat(alpha = ALPHA, beta = BETA-DELTA, delta = DELTA, df = m.sim)
#### sigma.hat.sq ####
f_sigma.hat.sq <- function(alpha, beta, delta, df, mu.hat) {
df %>%
filter(age > alpha, age < beta) %>%
mutate(a.mu = age - mu.hat) %>% # CHECK THIS
mutate(a.mu = age) %>%
mutate(r = a.mu^2 * v * n) %>%
select(r) %>%
sum() %>%
return()
}
#### sigma.hat.sq ####
f_sigma.hat.sq <- function(alpha, beta, delta, df, mu.hat) {
df %>%
filter(age > alpha, age < beta) %>%
mutate(a.mu = age - mu.hat) %>% # CHECK THIS
#mutate(a.mu = age) %>%
mutate(r = a.mu^2 * v * n) %>%
select(r) %>%
sum() %>%
return()
}
sigma.hat.sq_w <- f_sigma.hat.sq(alpha = ALPHA + DELTA,
beta = BETA,
delta = DELTA,
df = f.sim,
mu.hat = mu.hat_w)
sigma.hat.sq_m <- f_sigma.hat.sq(alpha = ALPHA,
beta = BETA - DELTA,
delta = DELTA,
df = m.sim,
mu.hat = mu.hat_m)
# Quick sanity check:
ggplot() +
geom_line(data = m.sim, aes(x = age, y = v), color = "blue") +
geom_line(data = f.sim, aes(x = age, y = v), color = "red")  +
geom_vline(xintercept = ALPHA + DELTA) +
geom_vline(xintercept = BETA - DELTA) +
geom_vline(xintercept = mu_m, color = "blue") +
geom_vline(xintercept = mu_f, color = "red")
mu_f/mu.hat)f
mu_f/mu.hat_f
mu_f/mu.hat_w
mu_m/mu.hat_m
f_mu.hat <- function(alpha, beta, delta, df) {
df %>%
filter(age > alpha & age < beta) %>%
mutate(av = age * v * n ) %>%
select(av) %>%
sum() %>%
#divide_by(df %>% select(n) %>% sum()) %>%
return()
}
mu.hat_w <- f_mu.hat(alpha = ALPHA+DELTA, beta = BETA, delta = DELTA, df = f.sim)
mu.hat_m <- f_mu.hat(alpha = ALPHA, beta = BETA-DELTA, delta = DELTA, df = m.sim)
f_mu.hat <- function(alpha, beta, delta, df) {
df %>%
filter(age > alpha & age < beta) %>%
mutate(av = age * v * n ) %>%
select(av) %>%
sum() %>%
# divide_by(df %>% select(n) %>% sum()) %>%
return()
}
mu.hat_w <- f_mu.hat(alpha = ALPHA+DELTA, beta = BETA, delta = DELTA, df = f.sim)
mu.hat_m <- f_mu.hat(alpha = ALPHA, beta = BETA-DELTA, delta = DELTA, df = m.sim)
# Quick sanity check:
ggplot() +
geom_line(data = m.sim, aes(x = age, y = v), color = "blue") +
geom_line(data = f.sim, aes(x = age, y = v), color = "red")  +
geom_vline(xintercept = ALPHA + DELTA) +
geom_vline(xintercept = BETA - DELTA) +
geom_vline(xintercept = mu_m, color = "blue") +
geom_vline(xintercept = mu_f, color = "red")
#### sigma.hat.sq ####
f_sigma.hat.sq <- function(alpha, beta, delta, df, mu.hat) {
df %>%
filter(age > alpha, age < beta) %>%
#mutate(a.mu = age - mu.hat) %>% # CHECK THIS
mutate(a.mu = age) %>%
mutate(r = a.mu^2 * v * n) %>%
select(r) %>%
sum() %>%
return()
}
sigma.hat.sq_w <- f_sigma.hat.sq(alpha = ALPHA + DELTA,
beta = BETA,
delta = DELTA,
df = f.sim,
mu.hat = mu.hat_w)
sigma.hat.sq_m <- f_sigma.hat.sq(alpha = ALPHA,
beta = BETA - DELTA,
delta = DELTA,
df = m.sim,
mu.hat = mu.hat_m)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
m.sim <- readxl::read_excel("men-sim-file.xls", col_names = F)
m.sim
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
e2
e1
DELTA
f_e3 <- function(delta = DELTA,
sigma.hat.sq_w = sigma.hat.sq_w,
mu.hat_w = mu.hat_w,
Q = Q,
R = R,
Q.tilde = Q.tilde,
sigma.hat.sq_m = sigma.hat.sq_m,
N=N) {
a1 <- sigma.hat.sq_w + 2*mu.hat_m^2 - Q.tilde*mu.hat_m^2 - 2*R.tilde*mu.hat_m +
Q.tilde*R^2 - Q/Q.tilde*sigma.hat.sq_m
return(delta - a1/N)
}
e3 <- f_e3(delta = DELTA,
sigma.hat.sq_w = sigma.hat.sq_w,
mu.hat_w = mu.hat_w,
Q = Q,
R = R,
Q.tilde = Q.tilde,
sigma.hat.sq_m = sigma.hat.sq_m,
N=N)
e3
f_e4 <- function(delta = DELTA,
sigma.hat.sq_m = sigma.hat.sq_m,
mu.hat_m= mu.hat_m,
Q.tilde = Q.tilde,
R.tilde = R.tilde,
mu.hat_m = mu.hat_m,
Q = Q,
sigma.hat.sq_w = sigma.hat.sq_w,
N.tilde = N.tilde) {
a1 <- sigma.hat.sq_m + 2*mu.hat_m^2 - Q.tilde*mu.hat_m^2 - 2*R.tilde*mu.hat_m +
Q.tilde * R.tilde^2 - Q.tilde/Q*sigma.hat.sq_w
return(delta + a1/N.tilde)
}
f_e4 <- function(delta = DELTA,
sigma.hat.sq_m = sigma.hat.sq_m,
mu.hat_m= mu.hat_m,
Q.tilde = Q.tilde,
R.tilde = R.tilde,
Q = Q,
sigma.hat.sq_w = sigma.hat.sq_w,
N.tilde = N.tilde) {
a1 <- sigma.hat.sq_m + 2*mu.hat_m^2 - Q.tilde*mu.hat_m^2 - 2*R.tilde*mu.hat_m +
Q.tilde * R.tilde^2 - Q.tilde/Q*sigma.hat.sq_w
return(delta + a1/N.tilde)
}
e4 <- f_e4(delta = DELTA,
sigma.hat.sq_m = sigma.hat.sq_m,
mu.hat_m= mu.hat_m,
Q.tilde = Q.tilde,
R.tilde = R.tilde,
Q = Q,
sigma.hat.sq_w = sigma.hat.sq_w,
N.tilde = N.tilde)
print(e4)
stimator <- function(DELTA, ALPHA, BETA, f.sim, m.sim, mu_m, mu_f){
#### mu ####
f_mu.hat <- function(alpha, beta, delta, df) {
df %>%
filter(age > alpha & age < beta) %>%
mutate(av = age * v * n ) %>%
select(av) %>%
sum() %>%
# divide_by(df %>% select(n) %>% sum()) %>%
return()
}
mu.hat_w <- f_mu.hat(alpha = ALPHA+DELTA, beta = BETA, delta = DELTA, df = f.sim)
mu.hat_m <- f_mu.hat(alpha = ALPHA, beta = BETA-DELTA, delta = DELTA, df = m.sim)
# Quick sanity check:
# ggplot() +
#   geom_line(data = m.sim, aes(x = age, y = v), color = "blue") +
#   geom_line(data = f.sim, aes(x = age, y = v), color = "red")  +
#   geom_vline(xintercept = ALPHA + DELTA) +
#   geom_vline(xintercept = BETA - DELTA) +
#   geom_vline(xintercept = mu_m, color = "blue") +
#   geom_vline(xintercept = mu_f, color = "red")
#### sigma.hat.sq ####
f_sigma.hat.sq <- function(alpha, beta, delta, df, mu.hat) {
df %>%
filter(age > alpha, age < beta) %>%
#mutate(a.mu = age - mu.hat) %>% # CHECK THIS
mutate(a.mu = age) %>%
mutate(r = a.mu^2 * v * n) %>%
select(r) %>%
sum() %>%
return()
}
sigma.hat.sq_w <- f_sigma.hat.sq(alpha = ALPHA + DELTA,
beta = BETA,
delta = DELTA,
df = f.sim,
mu.hat = mu.hat_w)
sigma.hat.sq_m <- f_sigma.hat.sq(alpha = ALPHA,
beta = BETA - DELTA,
delta = DELTA,
df = m.sim,
mu.hat = mu.hat_m)
#### Q and Q.tilde ####
f_Q <- function(alpha, beta, df) {
df %>%
filter(age > alpha, age < beta) %>%
mutate(r = v*n) %>%
sum()
}
Q <- f_Q(alpha = ALPHA + DELTA,
beta = BETA,
df = f.sim)
Q.tilde <- f_Q(alpha = ALPHA,
beta = BETA - DELTA,
df = m.sim)
#### R and R.tilde ####
R <- mu.hat_w + DELTA
R.tilde <- mu.hat_m - DELTA
#### N and N.tilde ####
f_N <- function(alpha, beta, R, sigma.hat.sq_m, Q,
Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - R)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == beta) %>% pull("v"))
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("v"))
a3 <- -2*mu.hat_w + 2*R*Q
return(a1-a2+a3)
}
N <- f_N(ALPHA, BETA, R, sigma.hat.sq_m, Q,
Q.tilde, f.sim,mu.hat_m, mu.hat_w, DELTA)
f_N.tilde <- function(alpha, beta, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, df, mu.hat_m, mu.hat_w, delta ){
a1 <- ((beta - mu.hat_w)^2 - sigma.hat.sq_w/Q) *(df %>% filter(age == beta - delta) %>% pull("v"))
a2 <- ((alpha - R.tilde)^2 - sigma.hat.sq_w/Q)* (df %>% filter(age == alpha) %>% pull("v"))
a3 <- -2*mu.hat_m + 2*R.tilde*Q.tilde
return(a1 - a2 + a3)
}
N.tilde <- f_N.tilde(ALPHA, BETA, R.tilde, sigma.hat.sq_w,
Q, Q.tilde, m.sim, mu.hat_m, mu.hat_w, DELTA)
#### D and D.tilde ####
# Need to calc v' (vp; v prime)
f.sim$vp <- 0
m.sim$vp <- 0
for (i in 1:nrow(f.sim)){
vp <- (f.sim[i+1, "v"] - f.sim[i, "v"] ) %>% pull()
n <- (f.sim[i, "n"]) %>% pull
f.sim[i, "vp"] <- vp/n
}
f.sim[nrow(f.sim), "vp"] <- 0
for (i in 1:nrow(m.sim)){
vp <- (m.sim[i+1, "v"] - m.sim[i, "v"] ) %>% pull()
n <- (m.sim[i, "n"]) %>% pull
m.sim[i, "vp"] <- vp/n
}
m.sim[nrow(m.sim), "vp"] <- 0
f_D <- function(beta, R, sigma.hat.sq_m, Q.tilde,
df, alpha, mu.hat_m, delta, Q){
a1 <- ((beta - R)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == beta) %>% pull("vp"))
a2 <- ((alpha - mu.hat_m)^2 - sigma.hat.sq_m/Q.tilde) * (df %>% filter(age == alpha + delta) %>% pull("vp"))
a3 <- 2*(beta - R)*(df %>% filter(age == beta) %>% pull("v"))
a4 <- 2*(alpha - mu.hat_m)*(df %>% filter(age == alpha + delta) %>% pull("v")) + 2*Q
return(a1 - a2 - a3 + a4)
}
D <- f_D(BETA, R, sigma.hat.sq_m, Q.tilde, m.sim, ALPHA, mu.hat_m, DELTA, Q)
f_D.tilde <- function(beta, mu.hat_w, sigma.hat.sq_w, Q, df, alpha, R.tilde, Q.tilde, delta) {
a1 <- ((beta - mu.hat_w)^2 - sigma.hat.sq_w/Q) * (df %>% filter(age == beta - delta) %>% pull("vp"))
a2 <- ((alpha - R.tilde)^2 - sigma.hat.sq_w/Q) * (df %>% filter(age == alpha) %>% pull("vp"))
a3 <- 2 * (beta - mu.hat_w) * (df %>% filter(age == beta - delta) %>% pull("v"))
a4 <- 2*(alpha - R.tilde) * (df %>% filter(age == alpha) %>% pull("v")) + 2*Q.tilde
return(a1 - a2 - a3 + a4)
}
D.tilde <- f_D.tilde(BETA, mu.hat_w, sigma.hat.sq_w, Q, m.sim, ALPHA, R.tilde, Q.tilde, DELTA)
ret <- list("ALPHA" = ALPHA,
"BETA" = BETA,
"DELTA" = DELTA,
"D" = D,
"D.tilde" = D.tilde,
"mu_f" = mu_f,
"mu_m" = mu_m,
"mu.hat_m" = mu.hat_m,
"mu.hat_w" = mu.hat_w,
"N" = N,
"N.tilde" = N.tilde,
"Q" = Q,
"Q.tilde" = Q.tilde,
"R.tilde" = R.tilde,
"sigma.hat.sq_m" = sigma.hat.sq_m,
"sigma.hat.sq_w" = sigma.hat.sq_w)
return(ret)
}
stimator(DELTA, ALPHA, BETA, f.sim, m.sim, mu_m, mu_f) %>% attach()
?attach
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
attach(stimator(DELTA, ALPHA, BETA, f.sim, m.sim, mu_m, mu_f))
ret <- stimator(DELTA, ALPHA, BETA, f.sim, m.sim, mu_m, mu_f)
ret
attach(ret)
search(R)
search("R")
?search
search()
source('~/S-timators/shift.R', echo=TRUE)
detach
?detach
source('~/S-timators/shift.R', echo=TRUE)
detach()
attach(ret)
?with
detach()
R
e1 <- with(ret, f_e1(delta = DELTA,
N = N,
D = D,
sigma.hat.sq_w = sigma.hat.sq_w,
sigma.hat.sq_m = sigma.hat.sq_m,
mu.hat_w = mu.hat_w,
Q = Q,
Q.tilde = Q.tilde,
R = R) )
print(e1)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
n <- 10
iteration_df <- data.frame(matrix(0, n, 4))
colnames(iteration_df) <- c("e1", "e2", "e3", "e4")
iteration_df
# e1
print(e1)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
stimator
stimator(DELTA = e1, ALPHA, BETA, f.sim, m.sim)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
?diff
e1
f.sim
?stop
tail(f.sim)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
source('~/S-timators/shift.R', echo=TRUE)
iteration_df
plot(iteration_df$e3)
# e4
iteration_df[1, "e4"] <- e4
for (i in 2:n) {
ret <- stimator(DELTA = e4, ALPHA, BETA, f.sim, m.sim)
e4 <- with(ret, f_e4(delta = DELTA,
sigma.hat.sq_m = sigma.hat.sq_m,
mu.hat_m= mu.hat_m,
Q.tilde = Q.tilde,
R.tilde = R.tilde,
Q = Q,
sigma.hat.sq_w = sigma.hat.sq_w,
N.tilde = N.tilde))
iteration_df[i, "e4"] <- e4
}
iteration_df
plot(iteration_df$e4)
